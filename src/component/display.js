import React, {Component} from "react";import FontAwesome from "react-fontawesome";function DisplayPanel(props) {    return (        <ul className="display--todo">            {props.children}        </ul>    )}class InputForm extends Component {    constructor(props) {        super(props);        this.state = {            todomessage: ""        }        this.handleOnchage = this.handleOnchage.bind(this);        this.handleOnsubmit = this.handleOnsubmit.bind(this)    }    handleOnchage(value) {        return this.setState({todomessage: value})    }    handleOnsubmit(e) {        let message;        e.preventDefault()        message = /\S/.test(this.state.todomessage)        if (!message) {            return        }        this.setState({todomessage: ""});        this.props.onsubmit({            message: this.state.todomessage,            done: false,            category: this.props.isCurrentCatgory,            id: this.props.getId(this.props.isCurrentCatgory)        });        return !1;    }    render() {        const isAll = this.props.isCurrentFocus === "all";        return (            <form className="form--group"                  onSubmit={(e) => this.handleOnsubmit(e)}            >                <input                    value={this.state.todomessage}                    type="text"                    placeholder={isAll ? "select category to add todo" : "Add todo to category"}                    className="display--input"                    onChange={(e) => this.handleOnchage(e.target.value)}                    disabled={isAll}                />                <button className="btn isRounded" type="submit">+</button>            </form>        );    }}class TodoListItem extends Component {    constructor(props){        super(props);            }        render(){                return (            <li className={this.props.getDoneState(this.props.boundCat, this.props.boundId) ? "todo--item isDone" : "todo--item" }>                <div className="todo--text">{this.props.message}</div>                <Utilities                    del={this.props.del}                    boundCategory={this.props.boundCat}                    boundId={this.props.boundId}                    setDoneState={this.props.setDoneState}                    doneState={this.props.getDoneState(this.props.boundCat, this.props.boundId)}                />            </li>        );    }}class Utilities extends React.Component {    constructor(props) {        super(props);        this.state = {            visibility: false,            doneStateMarker: false        };        this.toggleVisibility = this.toggleVisibility.bind(this);        this.triggerDelete = this.triggerDelete.bind(this);        this.setDoneStateTrigger = this.setDoneStateTrigger.bind(this);    }    componentDidMount(){        return this.setState({doneStateMarker: this.props.doneState})    }    toggleVisibility() {        return (this.state.visibility ?            this.setState({visibility: false}) :            this.setState({visibility: true}))    };        triggerDelete(category, index){        this.props.del(category, index);        return this.setState({            visibility: false        })    }    setDoneStateTrigger(category, index, e){        let doneStateMarker;        doneStateMarker = this.state.doneStateMarker;        this.props.setDoneState(category, index);        this.setState({            visibility: false,            doneStateMarker: !doneStateMarker        });        e.stopPropagation();    }        render() {        const [category, index] = [this.props.boundCategory, this.props.boundId];                //todo prevent render of multiple utility divs         return (            <div>                <ul className="todo--utils" onClick={() => this.toggleVisibility()}>                    <li></li>                    <li></li>                    <li></li>                </ul>                {                    this.state.visibility &&                    <div className="housing">                        <ul className="utils--items">                            <li onClick={(e) => this.setDoneStateTrigger(category, index, e)}>                                {                                    this.state.doneStateMarker &&                                       <FontAwesome className='checkMark' name='check' size='2x'/>                                }                                Done                            </li>                            <li onClick={() => this.triggerDelete(category, index)}>                                <FontAwesome className='trash' name='trash' size='2x'/>                                Delete                            </li>                        </ul>                    </div>                }            </div>        )    }}function Display(props) {    const _inputOnsubmit = props.data.onsubmit;    const list = props.isSelected.map((msg, index) => {        return <TodoListItem             key={index}            message={msg.message}            del={props.data.deleteTodo}            boundCat={props.data.isCurrentCat}            boundId={index}            setDoneState={props.data.setDoneState}            getDoneState={props.data.doneStatus}        />    });    return (        <div className="card--display">            <InputForm                onsubmit={_inputOnsubmit}                isCurrentFocus={props.data.focusOnAll}                isCurrentCatgory={props.data.isCurrentCat}                getId={props.data.getId}            />            <div                className="date">                Today {new Date().toLocaleDateString()}            </div>            <DisplayPanel>                {list}            </DisplayPanel>        </div>    );}export default Display;