import React, {Component} from 'react';import Categories from "./component/categories"import Display from "./component/display";import './App.css';class App extends Component {    constructor(props) {        super(props);        this.state = {            category: {                groceries: [],                work: [],                programming: [],                shopping: []            },            isCurrentlyShowing: "all",            isSelectedCategory: []        };                Object.defineProperty(this.state.category, "all", {            writable: true,            configurable: false,            emumerable: false,            value: []        });        this.onCategoryClick = this.onCategoryClick.bind(this);        this.onFormSubmit = this.onFormSubmit.bind(this);        this.concatAll = this.concatAll.bind(this);        this.updateCategoryAll = this.updateCategoryAll.bind(this);        this.todoSize = this.todoSize.bind(this);        this.getCurrentIdInCategory = this.getCurrentIdInCategory.bind(this);        this.deleteTodoFromCategory = this.deleteTodoFromCategory.bind(this);        this.toggleComplete = this.toggleComplete.bind(this);        this.getDoneStatus = this.getDoneStatus.bind(this);    }    componentDidMount() {        let category = this.state.category;        category.all = this.concatAll();        return this.setState({            category: category,            isSelectedCategory: this.state.category.all        });    }    onCategoryClick(category) {        this.setState({            isCurrentlyShowing: category.toLowerCase(),            isSelectedCategory: this.state.category[category.toLowerCase()]        })    }    onFormSubmit({message, done, category, id}) {        let isShowing, categoryToPush;        //TODO remove disallow text that already exists in the category        isShowing = this.state.isCurrentlyShowing;        categoryToPush = this.state.category[isShowing];        categoryToPush.push({            message: message.toString().trim(),             done: done,            category: category,            id: id         });        this.setState({            [this.state.category[isShowing]]: categoryToPush        });        return this.updateCategoryAll();    }    concatAll() {        let categories = this.state.category;        let allArray = [];        for (let entity in categories) {            if (categories.hasOwnProperty(entity)) {                allArray.push(...categories[entity])            }        }        return allArray;    }        updateCategoryAll(){        let category = this.state.category;        category.all = this.concatAll();        return this.setState({            category: category        });    }        todoSize(cat){        return this.state.category[cat].length;    }        shuffle(arr){        let temp = arr.pop();        arr.unshift(temp);        return arr;    }        getCurrentIdInCategory(cat){        return (this.state.category[cat].length - 1) + 1;    }        deleteTodoFromCategory(categorytype, id){        let category = this.state.category[categorytype];        category.splice(id, 1);                this.setState({            [category]: category        });        this.updateCategoryAll();        return !1;    }    toggleComplete(categorytype, id){        let category = this.state.category[categorytype];        let done = category[id].done;        category[id].done = !done;        this.setState({            [category]: category        });        this.updateCategoryAll();        return !1;    }        getDoneStatus (categorytype, id){        let category = this.state.category[categorytype];        let done = category[id].done;        return done;    }    render() {        const nodeNames = this.shuffle(Object.getOwnPropertyNames(this.state.category));                const categoryProps = {            isActive: this.state.isCurrentlyShowing,            handleCatClick: this.onCategoryClick,            categorySize: this.todoSize,            nodeNames: nodeNames,        };        const displayProps = {            onsubmit: this.onFormSubmit,            focusOnAll: this.state.isCurrentlyShowing,            isCurrentCat: this.state.isCurrentlyShowing,            getId: this.getCurrentIdInCategory,            deleteTodo: this.deleteTodoFromCategory,            setDoneState: this.toggleComplete,            doneStatus: this.getDoneStatus        };                       return (            <div className="container">                <div className="card">                    <Categories data={categoryProps}/>                    <Display                        data={displayProps}                        isSelected={this.state.isSelectedCategory}                    />                </div>            </div>        );    }}export default App;